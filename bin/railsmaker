#!/usr/bin/env ruby
# frozen_string_literal: true

require 'railsmaker'
require 'thor'

module RailsMaker
  class BaseCLI < Thor
    include Thor::Actions

    no_commands do
      def colorize(str, color)
        case color
        when :green then "\e[32m#{str}\e[0m"
        when :red then "\e[31m#{str}\e[0m"
        when :blue then "\e[34m#{str}\e[0m"
        when :gray then "\e[90m#{str}\e[0m"
        else str
        end
      end

      def status_indicator(value)
        if value == true || (value.is_a?(String) && !value.empty?)
          colorize('●', :green) + ' Enabled'
        else
          colorize('○', :red) + ' Disabled'
        end
      end

      def print_summary(title, sections)
        max_label_width = sections.values.flatten(1).map { |item| item[0].length }.max

        say "\n#{colorize("═══ #{title} ═══", :blue)}\n\n"

        sections.each do |section_title, items|
          say colorize(section_title.upcase, :gray)
          say colorize('─' * section_title.length, :gray)

          items.each do |label, value, format = :default|
            formatted_value = case format
                              when :status then status_indicator(value)
                              when :highlight then colorize(value, :blue)
                              else value.to_s
                              end

            say "  #{label.ljust(max_label_width)}  #{formatted_value}"
          end
          say "\n"
        end
      end

      def to_generator_args(options)
        options.flat_map { |key, value| ["--#{key}", value.to_s] }
      end
    end
  end

  class RemoteCLI < BaseCLI
    map 'signoz:opentelemetry' => :signoz_opentelemetry

    desc 'signoz SERVER', 'Install SigNoz observability server on a remote machine'
    long_desc <<-LONGDESC
      Installs SigNoz server on a remote machine. SigNoz is a full-stack open-source APM#{' '}
      and observability tool.

      Examples:
        # Install using SSH key authentication
        $ railsmaker remote signoz --ssh-host=example.com --ssh-user=deploy --key-path=~/.ssh/id_rsa

        # Install using password authentication (will prompt for password)
        $ railsmaker remote signoz --ssh-host=example.com --ssh-user=deploy

        # Force reinstallation of existing instance
        $ railsmaker remote signoz --ssh-host=example.com --ssh-user=deploy --force
    LONGDESC
    method_option :ssh_host, type: :string, required: true, desc: 'SSH host (e.g., 123.456.789.0)'
    method_option :ssh_user, type: :string, default: 'root', desc: 'SSH user with sudo access'
    method_option :key_path, type: :string, desc: 'Path to SSH key (if not provided, will use password auth)'
    method_option :force, type: :boolean, default: false, desc: 'Force reinstallation if already installed'
    def signoz
      print_remote_summary('SigNoz Installation', options)
      RailsMaker::Generators::SignozGenerator.start(to_generator_args(options))
    end

    desc 'signoz:opentelemetry', 'Install SigNoz OpenTelemetry collector on a remote machine'
    long_desc <<-LONGDESC
      Installs and configures the OpenTelemetry collector on a remote machine to send metrics,#{' '}
      traces, and logs to your SigNoz server.

      The collector will be configured to:
        • Collect Docker container logs
        • Forward metrics and traces
        • Auto-discover running services

      Examples:
        # Basic installation
        $ railsmaker remote signoz:opentelemetry --ssh-host=app.example.com --ssh-user=deploy \\
            --signoz-host=signoz.example.com

        # With custom hostname for better identification
        $ railsmaker remote signoz:opentelemetry --ssh-host=app.example.com --ssh-user=deploy \\
            --signoz-host=signoz.example.com --hostname=production-app-1
    LONGDESC
    method_option :ssh_host, type: :string, required: true, desc: 'SSH host where collector will be installed'
    method_option :signoz_server_host, type: :string, required: true, desc: 'Host where SigNoz server is running'
    method_option :ssh_user, type: :string, default: 'root', desc: 'SSH user with sudo access'
    method_option :hostname, type: :string, default: 'rails-apps-1', desc: 'Custom hostname identifier of the server'
    method_option :key_path, type: :string, desc: 'Path to SSH key (if not provided, will use password auth)'
    method_option :force, type: :boolean, default: false, desc: 'Force reinstallation if already installed'
    def signoz_opentelemetry
      print_remote_summary('SigNoz OpenTelemetry Installation', options)
      RailsMaker::Generators::SignozOpentelemetryGenerator.start(to_generator_args(options))
    end

    desc 'plausible', 'Install Plausible Analytics on a remote server'
    long_desc <<-LONGDESC
      Installs Plausible Analytics on a remote machine. Plausible is a lightweight,#{' '}
      open-source alternative to Google Analytics.

      Examples:
        # Basic installation
        $ railsmaker remote plausible --ssh-host=analytics.example.com --ssh-user=deploy \\
            --analytics-host=plausible.example.com

        # With custom SSH key
        $ railsmaker remote plausible --ssh-host=analytics.example.com --ssh-user=deploy \\
            --analytics-host=plausible.example.com --key-path=~/.ssh/analytics_key
    LONGDESC
    method_option :ssh_host, type: :string, required: true, desc: 'SSH host where Plausible will be installed'
    method_option :analytics_host, type: :string, required: true, desc: 'Domain where Plausible will be accessible'
    method_option :ssh_user, type: :string, default: 'root', desc: 'SSH user with sudo access'
    method_option :key_path, type: :string, desc: 'Path to SSH key (if not provided, will use password auth)'
    method_option :force, type: :boolean, default: false, desc: 'Force reinstallation if already installed'
    def plausible
      print_remote_summary('Plausible Installation', options)
      RailsMaker::Generators::PlausibleGenerator.start(to_generator_args(options))
    end

    private

    def print_remote_summary(title, opts)
      sections = {
        'Connection Details' => [
          ['SSH Host', opts[:ssh_host], :highlight],
          ['SSH User', opts[:ssh_user], :highlight],
          ['SSH Key path', opts[:key_path], :highlight]
        ]
      }

      if opts[:signoz_server_host]
        sections['Configuration'] = [
          ['SigNoz Host', opts[:signoz_server_host], :highlight],
          ['Custom Hostname', opts[:hostname], :highlight]
        ]
      end

      if opts[:analytics_host]
        sections['Configuration'] = [
          ['Analytics Host', opts[:analytics_host], :highlight]
        ]
      end

      print_summary(title, sections)
    end
  end

  class CLI < BaseCLI
    desc 'new', 'Generate a new Rails application with integrated features'
    method_option :name, type: :string, required: true, aliases: '-n', desc: 'Application name'
    method_option :docker, type: :string, required: true, aliases: '-d', desc: 'Docker username'
    method_option :ip, type: :string, required: true, aliases: '-i', desc: 'Server IP address'
    method_option :domain, type: :string, required: true, aliases: '-D', desc: 'Domain name'
    method_option :auth, type: :boolean, default: true, desc: 'Include authentication'
    method_option :mailjet, type: :boolean, default: true, desc: 'Configure Mailjet for email'
    method_option :bucketname, type: :string, desc: 'Enable litestream backups (provide your BUCKETNAME)'
    method_option :opentelemetry, type: :boolean, default: true, desc: 'Configure OpenTelemetry'
    method_option :analytics, type: :string, desc: 'Set up Plausible Analytics (provide your ANALYTICS_DOMAIN)'
    method_option :sentry, type: :boolean, default: true, desc: 'Configure Sentry error tracking'
    method_option :ui, type: :boolean, default: true, desc: 'Include UI assets'
    def new
      self.destination_root = File.expand_path(options[:name], Dir.pwd)
      say "Generating new Rails application: #{options[:name]}", :yellow
      generate_application(options)
    end

    desc 'wizard', 'Launch an interactive wizard for generating a Rails application'
    def wizard
      say 'Welcome to the RailsMaker wizard!', :blue
      wizard_options = collect_wizard_options
      self.destination_root = File.expand_path(wizard_options[:name], Dir.pwd)
      say "Generating new Rails application: #{wizard_options[:name]}", :yellow
      generate_application(wizard_options)
    end

    desc 'remote', 'Manage remote services'
    subcommand 'remote', RailsMaker::RemoteCLI

    def self.exit_on_failure?
      true
    end

    private

    def generate_application(opts)
      print_app_summary(opts)
      return unless yes?('Do you want to proceed with the installation? (y/N)')

      generate_components(opts)
      say 'Successfully generated RailsMaker template 🎉', :green
    end

    def print_app_summary(opts)
      sections = {
        'Application Settings' => [
          ['Name:', opts[:name], :highlight],
          ['Docker:', opts[:docker], :highlight],
          ['IP:', opts[:ip], :highlight],
          ['Domain:', opts[:domain], :highlight]
        ],
        'Features & Integrations' => [
          ['Authentication', opts[:auth], :status],
          ['Mailjet Email', opts[:mailjet], :status],
          ['Litestream Backups', opts[:bucketname], :status],
          ['OpenTelemetry', opts[:opentelemetry], :status],
          ['Plausible Analytics', opts[:analytics], :status],
          ['Sentry Error Tracking', opts[:sentry], :status],
          ['UI Components', opts[:ui], :status]
        ]
      }

      print_summary('Configuration Summary', sections)
      print_warnings(opts)
    end

    def print_warnings(opts)
      warnings = []
      if !opts[:ui] && opts[:analytics]
        warnings << "- Analytics was enabled but won't be installed because UI is disabled"
      end
      if !opts[:ui] && opts[:auth]
        warnings << "- Authentication was enabled but won't be installed because UI is disabled"
      end
      warnings << "- No bucketname provided - Litestream backups won't be configured" if opts[:bucketname].to_s.empty?
      if opts[:analytics].to_s.empty?
        warnings << "- No analytics domain provided - Plausible Analytics won't be configured"
      end

      return unless warnings.any?

      say "\nWarnings:", :yellow
      warnings.each { |warning| say warning, :yellow }
    end

    def generate_components(opts)
      generator_args = to_generator_args(opts)

      RailsMaker::Generators::AppGenerator.start(generator_args)

      if opts[:ui]
        RailsMaker::Generators::AuthGenerator.start(generator_args) if opts[:auth]
        RailsMaker::Generators::UiGenerator.start(generator_args)
        RailsMaker::Generators::PlausibleInstrumentationGenerator.start(generator_args) if opts[:analytics]
      end

      RailsMaker::Generators::MailjetGenerator.start(generator_args) if opts[:mailjet]
      RailsMaker::Generators::LitestreamGenerator.start(generator_args) if opts[:bucketname]
      RailsMaker::Generators::OpentelemetryGenerator.start(generator_args) if opts[:opentelemetry]
      RailsMaker::Generators::SentryGenerator.start(generator_args) if opts[:sentry]
    end

    def collect_wizard_options
      wizard_options = {
        name: options[:name],
        docker: options[:docker],
        ip: options[:ip],
        domain: options[:domain],
        auth: options[:auth],
        mailjet: options[:mailjet],
        bucketname: options[:bucketname],
        opentelemetry: options[:opentelemetry],
        analytics: options[:analytics],
        sentry: options[:sentry],
        ui: options[:ui]
      }

      # Only ask for values that weren't provided via command line
      while wizard_options[:name].to_s.empty?
        wizard_options[:name] = ask('Application name:')
        say 'Application name is required', :red if wizard_options[:name].empty?
      end

      while wizard_options[:docker].to_s.empty?
        wizard_options[:docker] = ask('Docker username:')
        say 'Docker username is required', :red if wizard_options[:docker].empty?
      end

      while wizard_options[:ip].to_s.empty?
        wizard_options[:ip] = ask('Server IP address:')
        say 'Server IP address is required', :red if wizard_options[:ip].empty?
      end

      while wizard_options[:domain].to_s.empty?
        wizard_options[:domain] = ask('Domain name:')
        say 'Domain name is required', :red if wizard_options[:domain].empty?
      end

      wizard_options[:auth] = yes?('Include authentication? (y/N)') if wizard_options[:auth].nil?
      wizard_options[:mailjet] = yes?('Configure Mailjet for email? (y/N)') if wizard_options[:mailjet].nil?
      wizard_options[:bucketname] ||= ask('Litestream bucketname: Provide BUCKET_NAME (leave blank to skip):')
      if wizard_options[:opentelemetry].nil?
        wizard_options[:opentelemetry] =
          yes?('Configure OpenTelemetry for metrics? (y/N)')
      end
      wizard_options[:analytics] ||= ask('Plausible Analytics: Provide ANALYTICS_DOMAIN (leave blank to skip):')
      wizard_options[:sentry] = yes?('Configure Sentry error tracking? (y/N)') if wizard_options[:sentry].nil?
      wizard_options[:ui] = yes?('Include UI assets? (y/N)') if wizard_options[:ui].nil?

      # Clean up empty values
      wizard_options[:bucketname] = nil if wizard_options[:bucketname] && wizard_options[:bucketname].empty?
      wizard_options[:analytics] = nil if wizard_options[:analytics] && wizard_options[:analytics].empty?

      wizard_options
    end
  end
end

begin
  RailsMaker::CLI.start
rescue StandardError => e
  puts "\nError: #{e.message}"
  puts e.backtrace if ENV['DEBUG']
  puts "\nIf you need help, please create an issue at: https://github.com/sgerov/railsmaker/issues"
  exit 1
end
